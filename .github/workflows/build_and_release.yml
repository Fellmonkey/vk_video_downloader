name: Build and Release

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    # Добавляем явные разрешения для работы с репозиторием
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        # Используем токен с правами на запись
        token: ${{ secrets.GITHUB_TOKEN }}
        # Делаем полный клон, чтобы не было проблем с push
        fetch-depth: 0
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: '**/requirements.txt'
          
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    # Автоматическое обновление версии (патч)
    - name: Update patch version
      id: update_version
      run: python update_version.py patch
      
    # Получение описания релиза из файла CHANGELOG.md
    - name: Parse changelog
      id: changelog
      run: |
        # Читаем файл CHANGELOG.md и ищем раздел [Unreleased]
        $CHANGELOG_CONTENT = Get-Content -Path CHANGELOG.md -Raw
        
        # Находим раздел [Unreleased]
        if ($CHANGELOG_CONTENT -match '(?s)## \[Unreleased\](.*?)(?:\r?\n## |$)') {
          $UNRELEASED_CONTENT = $matches[1].Trim()
          
          # Готовим описание релиза
          $VERSION = "v${{ steps.update_version.outputs.new_version }}"
          $RELEASE_DATE = Get-Date -Format "yyyy-MM-dd"
          
          # Формируем полное описание
          $RELEASE_NOTES = "## Что нового в версии $VERSION ($RELEASE_DATE)

          $UNRELEASED_CONTENT
          
          ### Установка
          * Загрузите файл VK_Video_Downloader.zip
          * Распакуйте и запустите VK_Video_Downloader.exe
          * Приложение не требует установки"
          
          # Экранируем специальные символы для GitHub Actions
          $RELEASE_NOTES = $RELEASE_NOTES -replace "%", "%25" -replace "`n", "%0A" -replace "`r", "" -replace "`"", "%22"
          echo "::set-output name=release_notes::$RELEASE_NOTES"
          
          # Обновляем CHANGELOG.md - добавляем новую версию и перемещаем содержимое из Unreleased
          $NEW_VERSION_HEADER = "## [${{ steps.update_version.outputs.new_version }}] - $RELEASE_DATE"
          $UPDATED_CHANGELOG = $CHANGELOG_CONTENT -replace '## \[Unreleased\]', "## [Unreleased]`n`n$NEW_VERSION_HEADER"
          Set-Content -Path CHANGELOG.md -Value $UPDATED_CHANGELOG
          echo "CHANGELOG.md обновлен с новой версией $VERSION"
        } else {
          # Если раздел [Unreleased] не найден, используем запасной вариант
          $RELEASE_NOTES = "## Что нового в версии v${{ steps.update_version.outputs.new_version }} ($RELEASE_DATE)
          
          ### Установка
          * Загрузите файл VK_Video_Downloader.zip
          * Распакуйте и запустите VK_Video_Downloader.exe
          * Приложение не требует установки"
          
          # Экранируем специальные символы для GitHub Actions
          $RELEASE_NOTES = $RELEASE_NOTES -replace "%", "%25" -replace "`n", "%0A" -replace "`r", "" -replace "`"", "%22"
          echo "::set-output name=release_notes::$RELEASE_NOTES"
          
          echo "Предупреждение: Раздел [Unreleased] не найден в CHANGELOG.md"
        }
      shell: pwsh
      
    # Коммит обновленных файлов версии и CHANGELOG
    - name: Commit updates
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add version.py CHANGELOG.md
        git commit -m "Автоматическое обновление версии до ${{ steps.update_version.outputs.new_version }} и CHANGELOG" || echo "No changes to commit"
      
    - name: Push changes
      # Используем действие push-action вместо git push напрямую
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
        
    - name: Build executable
      run: |
        python build_exe.py
        
    - name: Create ZIP archive
      run: |
        powershell Compress-Archive -Path dist/VK_Video_Downloader.exe -DestinationPath VK_Video_Downloader.zip
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: VK_Video_Downloader.zip
        name: Release v${{ steps.update_version.outputs.new_version }}
        tag_name: v${{ steps.update_version.outputs.new_version }}
        draft: false
        prerelease: false
        body: ${{ steps.changelog.outputs.release_notes }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}