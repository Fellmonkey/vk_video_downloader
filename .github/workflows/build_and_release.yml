name: Build and Release

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    # Добавляем явные разрешения для работы с репозиторием
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        # Используем токен с правами на запись
        token: ${{ secrets.GITHUB_TOKEN }}
        # Делаем полный клон, чтобы не было проблем с push
        fetch-depth: 0
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        cache-dependency-path: '**/requirements.txt'
          
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    # Автоматическое обновление версии (патч)
    - name: Update patch version
      id: update_version
      run: python update_version.py patch
      
    # Коммит обновленной версии
    - name: Commit version update
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add version.py
        git commit -m "Автоматическое обновление версии до ${{ steps.update_version.outputs.new_version }}" || echo "No changes to commit"
      
    - name: Push changes
      # Используем действие push-action вместо git push напрямую
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
        
    - name: Build executable
      run: |
        python build_exe.py
        
    - name: Create ZIP archive
      run: |
        powershell Compress-Archive -Path dist/VK_Video_Downloader.exe -DestinationPath VK_Video_Downloader.zip
        
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: VK_Video_Downloader.zip
        name: Release v${{ steps.update_version.outputs.new_version }}
        tag_name: v${{ steps.update_version.outputs.new_version }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  # Задача для мониторинга загрузок
  monitor_downloads:
    needs: build
    runs-on: ubuntu-latest
    # Также добавляем разрешения для tasks monitor_downloads
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Get download count
        id: get_downloads
        run: |
          # Получаем информацию о загрузках через GitHub API
          curl -sL https://api.github.com/repos/${{ github.repository }}/releases | \
          jq '[.[].assets[].download_count] | add' > download_count.txt
          echo "TOTAL_DOWNLOADS=$(cat download_count.txt)" >> $GITHUB_ENV
          echo "total_downloads=$(cat download_count.txt)" >> $GITHUB_OUTPUT
          
      - name: Update README with download count
        run: |
          if [ -f README.md ]; then
            # Обновляем счетчик в README, если он существует
            sed -i "s/Загрузок: [0-9]*/Загрузок: ${{ env.TOTAL_DOWNLOADS }}/" README.md
            git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add README.md
            git commit -m "Обновление счетчика загрузок: ${{ env.TOTAL_DOWNLOADS }}" || echo "No changes to commit"
          fi
          
      - name: Pull and merge changes
        run: |
          git pull --no-rebase origin ${GITHUB_REF#refs/heads/}
          
      - name: Push README update
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          force: true  # Use force push to ensure updates go through
          
      - name: Create download statistics report
        run: |
          mkdir -p stats
          echo "# Статистика загрузок VK Video Downloader" > stats/download_stats.md
          echo "" >> stats/download_stats.md
          echo "Общее количество загрузок: **${{ env.TOTAL_DOWNLOADS }}**" >> stats/download_stats.md
          echo "" >> stats/download_stats.md
          echo "Последнее обновление: $(date '+%Y-%m-%d %H:%M:%S')" >> stats/download_stats.md
          
          # Получаем детальную статистику по версиям
          echo "" >> stats/download_stats.md
          echo "## Загрузки по версиям" >> stats/download_stats.md
          echo "" >> stats/download_stats.md
          curl -sL https://api.github.com/repos/${{ github.repository }}/releases | \
          jq -r '.[] | "- **" + .tag_name + "**: " + (.assets[].download_count | tostring) + " загрузок"' >> stats/download_stats.md
          
      - name: Upload statistics artifact
        uses: actions/upload-artifact@v4
        with:
          name: download-statistics
          path: stats/download_stats.md